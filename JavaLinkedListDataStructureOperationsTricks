package j.datastructure.tutorial.linkedlist.try1;

public class LinkedList {
    Node head;

    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
        }
    }

    public void addLast(int data) {
        Node node = new Node(data);
        node.next = null;
        Node temp = head;
        if (temp == null) {
            head = node;
        } else {
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = node;
        }
    }

    public void addFirst(int data) {
        Node n = new Node(data);
        n.next = head;
        head = n;
    }

    public void add(int index, int data)
        throws Exception {

        if (index > size()) {
            throw new Exception("Index out of range");
        }

        if (index == 0) {
            addFirst(data);
            return;
        }

        if (index == size()) {
            addLast(data);
            return;
        }

        Node n = new Node(data);
        int count = 0;
        Node temp = head;
        while (temp != null) {
            if (index - 1 == count) {
                n.next = temp.next;
                temp.next = n;
                return;
            }
            temp = temp.next;
            count++;
        }

    }

    public int size() {
        Node temp = head;
        int counter = 0;
        while (temp != null) {
            counter++;
            temp = temp.next;
        }

        return counter;
    }

    public int get(int index)
        throws Exception {
        Node temp = head;
        int count = 0;
        while (temp != null) {
            if (index == count) {
                return temp.data;
            }
            count++;
            temp = temp.next;
        }
        throw new Exception("Invalid Index Exception");
    }

    public void printList() {
        System.out.println("----- ------- --------- --------");
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.data);
            temp = temp.next;
        }
    }

    public void add(Node n) {
        if (n != null) {
            n.next = null;
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }

            temp.next = n;
        }
    }

    public void addAll(LinkedList newList) {
        if (newList != null) {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newList.head;
        }
    }

    public void addAll(int index, LinkedList newList)
        throws Exception {
        System.out.println("index = " + index);
        System.out.println("size = " + size());
        if (index > size()) {
            throw new Exception("Index out of size");
        }

        if (index == 0) {
            Node newTemp = newList.head;
            while (newTemp.next != null) {
                newTemp = newTemp.next;
            }
            newTemp.next = head;
            head = newList.head;
            return;
        }

        if (index == size()) {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newList.head;
            return;
        }

        Node temp = head;
        int count = 0;
        while (temp.next != null) {
            if (index - 1 == count) {
                Node newTemp = newList.head;
                while (newTemp.next != null) {
                    newTemp = newTemp.next;
                }
                newTemp.next = temp.next;
                temp.next = newList.head;
            }
            count++;
            temp = temp.next;
        }
    }

    public boolean contains(int data) {
        Node n = new Node(data);
        Node temp = head;
        while (temp.next != null) {
            if (temp.data == n.data) {
                return true;
            }
            temp = temp.next;
        }

        return false;
    }

    public void remove(int index) throws Exception{
    	
    	if(index >=size()) 
    		throw new Exception("custom: IndexOutOfBoundException");
    	
    	if(index == 0) {
    		head = head.next;
    		return;
    	}
    	
    	
    	Node temp = head;
    	int counter = 0;
    	while(temp != null) {
    		if (counter+1 == index) {
    			temp.next = temp.next.next;
    			return;
    		}    		
    		counter ++;
    		temp = temp.next;
    	}
    }

    public void removeLastElement() throws Exception{
    	
    	if(size() == 0) throw new Exception ("List is Empty");
    	
    	if(size()== 1) {
    		remove(0);
    		return;
    	}
    	
    	Node temp = head;
    	int counter = 0;
    	while(temp.next != null) {
    		if(counter== size()-2) {
    			temp.next = null;
    			return;
    		}
    		counter++;
    		temp = temp.next;
    	}    	
    }
    
    public void removeLastElement(int newData)
        throws Exception {
        Node temp = head;
        int neededIndex = 0;
        int counter = 0;
        while (temp != null) {
            if (temp.data == newData) {
                neededIndex = counter;
            }
            counter++;
            temp = temp.next;
        }
        System.out.println("needed Index: " + neededIndex);
        remove(neededIndex);
    }

    public void deleteList() {
        head = null;
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.addLast(5);
        list.addLast(6);
        list.swapNodesWithoutSwapingData(3, 5);
        list.printList();

    }

    // with swaping data.
    public void swapNodes(int x, int y) {
        // determine the position of x and y
        int xPosition = -1;
        int yPosition = -1;
        Node temp = head;
        int counter = 0;
        while (temp != null) {
            if (temp.data == x) {
                xPosition = counter;
            }
            if (temp.data == y) {
                yPosition = counter;
            }
            counter++;
            temp = temp.next;
        }

        if (xPosition != -1 && yPosition != -1) {
            Node temp1 = head;
            int count = 0;
            while (temp1 != null) {
                if (count == xPosition) {
                    temp1.data = y;
                }
                if (count == yPosition) {
                    temp1.data = x;
                }
                count++;
                temp1 = temp1.next;
            }
        }

    }

    // without swaping data
    // 1, 2, 3, 4, 5, 6
    // 1, 2, 5, 4, 3, 6
    public void swapNodesWithoutSwapingData(int x, int y) {
        if (x == y)
            return;

        Node currX = head;
        Node prevX = null;
        while (currX != null && currX.data != x) {
            prevX = currX;
            currX = currX.next;
        }

        Node currY = head;
        Node prevY = null;
        while (currY != null && currY.data != y) {
            prevY = currY;
            currY = currY.next;
        }

        // If either x or y is not present, nothing to do
        if (currX == null || currY == null)
            return;

        // If x is not head of linked list
        if (prevX != null)
            prevX.next = currY;
        else //make y the new head
            head = currY;

        // If y is not head of linked list
        if (prevY != null)
            prevY.next = currX;
        else // make x the new head
            head = currX;

        // Swap next pointers
        Node temp = currX.next;
        currX.next = currY.next;
        currY.next = temp;

    }

    public void removeDuplicates() {
        Node temp1 = head;
        Node temp2 = head;
        while (temp1 != null) {
            while (temp2.next != null) {
                if (temp1.data == temp2.next.data) {
                    temp2.next = temp2.next.next;
                } else
                    temp2 = temp2.next;
            }

            temp1 = temp1.next;
            temp2 = temp1;
        }
    }

}
